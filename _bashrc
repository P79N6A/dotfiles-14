#!/bin/bash


source "$HOME/bin/_alias"


# todo-txt completion
_todotxtcli() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  local pre=${COMP_WORDS[COMP_CWORD-1]}
  local cst="${COMP_WORDS[COMP_CWORD-2]}_${COMP_WORDS[COMP_CWORD-1]}"
  case $pre in
    mit )
      COMPREPLY=( $(compgen -W "today tomorrow monday tuesday wednesday thursday friday saturday sunday january february march april may june july august september october november december" -- $cur) )
      ;;
    * )
      if [[ $cst =~ ^mv_[0-9]+$ ]]; then
        COMPREPLY=( $(compgen -W "today tomorrow monday tuesday wednesday thursday friday saturday sunday january february march april may june july august september october november december" -- $cur) )
      else
        COMPREPLY=( $(compgen -W "mit `eval todo.sh lsprj` `eval todo.sh lsc`" -- $cur) )
      fi
      ;;
  esac
}
complete -F _todotxtcli t


function usage() {
  cat <<-EndVersion
  usage: $*
EndVersion

  complete 1
}


function hyperi() {
  if [[ $# != 2 ]]; then
    usage "hyperi user repo"
  else
    user=$1
    shift
    repo=$1
    shift

    (clone $user/$repo $HYPER_LOCAL/$repo && cd $HYPER_LOCAL/$repo && npm install)
  fi
}


function restore_dir() {
  local DIR=`cat "$DIR_LOG"`
  if [[ -n $DIR ]]; then
    cd "$DIR"
  fi

  echo -ne "" &> "$DIR_LOG"
}
# Restore previous working directory after reload shell.
restore_dir

function php_artisan() {
  php artisan $*
}
function composer_update() {
  composer update
}
function cd_atom() {
  cd "$HOME/.atom"
}
function cd_bin() {
  cd "$HOME/bin/$1"
}
function cd_home() {
  cd "$HOME/$1"
}
function cd_back() {
  cd - $1
}
function cd_www() {
  cd "$HOME/www/$1"
}
function cd_projects() {
  cd "$HOME/projects/$1"
}
function cd_to() {
  cd "$PWD/$1"
}
function cd_up() {
  cd "../$1"
}
function take() {
  if [[ -z "$1" ]]; then
    echo "Please enter directory name."
  else
    if [[ ! -e "$1" ]]; then
      mkdir -p "$1"
    fi

    cd "$1"
  fi
}


function tpwd {
    tmux rename-session ${PWD##*/}
}



function psg {
  FIRST=`echo $1 | sed -e 's/^\(.\).*/\1/'`
  REST=`echo $1 | sed -e 's/^.\(.*\)/\1/'`
  ps aux | grep "[$FIRST]$REST"
}
