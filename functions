#!/bin/bash


home() {
  cd "${HOME}" && [[ $# > 0 ]] && cd "./${*}"
}

atom() {
  cd "${HOME}/.atom" && [[ $# > 0 ]] && cd "./${*}"
}

dot() {
  cd "${HOME}/.dotfiles" && [[ $# > 0 ]] && cd "./${*}"
}

www() {
  cd "${HOME}/www" && [[ $# > 0 ]] && cd "./${*}"
}

proj() {
  cd "${HOME}/projects" && [[ $# > 0 ]] && cd "./${*}"
}

git_status() {
  if [[ $# == 1 && $1 == '-s' ]]; then
    git status --short
  else
    git status
  fi
}

commit_push() {
  remote_name=""
  branch_name=""
  message=""

  if [[ $# == 0 ]]; then
    ee "\nusage: message [remote] [branch]\n"
    return 1
  fi

  message="$1"; shift

  if [[ -n $1 ]]; then
    remote_name="$1"; shift
  fi

  if [[ -n $1 ]]; then
    branch_name="$1"; shift
  fi

  git commit -m $message && git push $remote_name $branch_name

  return
}

newCommand() {
  basename="`basename(${0})`"

  command_name=""
  target_directory="${DOTFILES_PATH}/.bin"

  if [[ $# == 0 ]]; then
    ee "
NAME: ${basename} -- Create new shell command
DESCRIPTION:
  The By default all of these output lines are sorted first by controlling terminal, then by process ID.
USAGE: command_name [target_directory]
OPTIONS:
  tar
"
    return 1
  fi
}

function press_enter() {
    # echo -en "\nPress Enter to continue"
    # read
    clear
}

take() {
  menu_items=(
      'Display free disk space'
      'Display free memory'
      )
  menu="\n\033[41mPROGRAME MENU\033[0m"
  count=0
  while [[ "x${menu_items[${count}]}" != "x" ]]; do
      menu="${menu}\n$((${count} + 1)) - ${menu_items[${count}]}"
      count=$(($count + 1))
  done
  menu+="\n\nPlease enter option # or enter 0 to exit\n"
  menu+="\n======== END ========\n"

  selection=''
  until [[ $selection == 0 ]]; do
      clear
      echo -e "$menu"
      read selection && echo

      case $selection in
          1 ) clear; (echo "" && df | less); read; press_enter;;
          2 ) clear; (echo "" && ls | less); read; press_enter;;
          0 ) return;;
          * ) press_enter;;
      esac
  done
}

flushdns() {
  (sudo dscacheutil -flushcache && sudo killall -HUP mDNSResponder && say -f in "Cache flushed")
}

search() {
  find $1 -name $2 -type $3;
  # find . -name "*.c" -type f -exec ls -l {} \;
}

reload_shell() {
  clear; exec $SHELL -l;
}

ver() {
  if [[ $# == 1 ]]; then
    $1 --version 2> /dev/null
  fi
}

ee() {
  echo -e "$1"; return
}
